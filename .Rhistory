theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
SLIDres<- readRDS("SLIDE_Res_CD4.rds")
SLIDres$SLIDE_res$interaction_vars
SLIDres$SLIDE_res$marginal_vars
sigK  <- c(9,19)
sigIn <- c("Z9.Z29","Z19.Z28")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=as.matrix(y),Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(y~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.5,1))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,06))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.6))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
library(MOFA2)
data_norm <- list()
data_norm$data$view_1 <-  t(scale(x,T,T))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "CD4-Mofa.hdf5")
ssc_MOFA <- load_model(file = "CD4-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(ssc_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
SumMofa$r.squared
sqrt(SumMofa$r.squared)
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(sqrt(SumMofa$r.squared))))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.6))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.6))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(sqrt(SumMofa$r.squared))))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.7))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.7))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
dim(x)
getwd()
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "CD4-Mofa.hdf5")
CD4_MOFA <- load_model(file = "CD4-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(CD4_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method))+
geom_col(width = 0.25,color="black")+coord_cartesian(ylim=c(0.4,0.7))+
theme_minimal()+scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00"))+
ylab("Spearman Correlation")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
P
dim(factors)
dim(factors$group1)
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,0.7)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
SLIDEres <- readRDS("SLIDE_res_SSC.RDS")
SLIDEres$SLIDE_res
SLIDEres$SLIDE_res$marginal_vars
SLIDEres$SLIDE_res$interaction_vars
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
dim(Z_ER)
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
dim(Dataint)
dim(Data_real)
x <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/Var50_mtrp.csv",
row.names = 1,
sep=",",
header = T)
y <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/SkinScore_MRSS.csv",
row.names = 1,
sep = ",",
header=T)
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured)))
SumMofa$r.squared
sqrt(SumMofa$r.squared)
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "CD4-Mofa.hdf5")
CD4_MOFA <- load_model(file = "CD4-Mofa.hdf5",remove_inactive_factors = FALSE)
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
dim(y)
dim(factors$group1)
################################################################################
library(MOFA2)
data_norm <- list()
data_norm$data$view_1 <-  t(scale(x,T,T))
dim(t(scale(x,T,T)))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
source("interUnion.R")
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,0.7)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,0.7)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,1)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
input_dim <- 804
latent_dim <- 9
x <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/Var50_mtrp.csv",
row.names = 1,
sep=",",
header = T)
y <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/SkinScore_MRSS.csv",
row.names = 1,
sep = ",",
header=T)
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
x <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/Var50_mtrp.csv",
row.names = 1,
sep=",",
header = T)
y <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/SkinScore_MRSS.csv",
row.names = 1,
sep = ",",
header=T)
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
input_dim <- 804
latent_dim <- 9
x <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/Var50_mtrp.csv",
row.names = 1,
sep=",",
header = T)
y <- read.table("C:/Users/javad/OneDrive - University of Pittsburgh/SLIDE/Lafyatis_SSc/All_Cell_Type/HER_082822/Data/SkinScore_MRSS.csv",
row.names = 1,
sep = ",",
header=T)
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
dim()
dim(data_norm)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
library(MOFA2)
data_norm <- list()
source("~/GitHub/SLIDE-temp/VAE_CD4.R", echo=TRUE)
P
sqrt(SumMofa$r.squared)
source("~/GitHub/SLIDE-temp/VAE-SSC.R", echo=TRUE)
keras::backend()
source("~/GitHub/SLIDE-temp/VAE-SSC.R", echo=TRUE)
reticulate::py_last_error()
## no sampling
vae <- keras_model(inputs = encoder$input, outputs = decoder(encoder$output[, 1:latent_dim]))
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
encoder_output <- predict(encoder, data_norm)
encoder_output <- stats::predict(encoder, data_norm)
sumVAE <- summary(lm(as.matrix(y)~encoder_output[,1:10]))
vAERsqaured <- sumVAE$r.squared
vAERsqaured
################################################################################
library(MOFA2)
data_norm <- list()
data_norm$data$view_1 <-  t(scale(x,T,T))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
source("interUnion.R")
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,1)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
sqrt(SumMofa$r.squared)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
## no sampling
vae <- keras_model(inputs = encoder$input, outputs = decoder(encoder$output[, 1:latent_dim]))
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
## no sampling
vae <- keras_model(inputs = encoder$input, outputs = decoder(encoder$output[, 1:latent_dim]))
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
encoder_output <- stats::predict(encoder, data_norm)
sumVAE <- summary(lm(as.matrix(y)~encoder_output[,1:10]))
vAERsqaured <- sumVAE$r.squared
################################################################################
library(MOFA2)
data_norm <- list()
data_norm$data$view_1 <-  t(scale(x,T,T))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
source("interUnion.R")
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,1)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
P
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
## no sampling
vae <- keras_model(inputs = encoder$input, outputs = decoder(encoder$output[, 1:latent_dim]))
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
data_norm
data_norm<- scale(x,T,T)
encoder <- keras_model_sequential() %>%
layer_dense(units = latent_dim*2, activation = "sigmoid", input_shape = c(input_dim), kernel_initializer = "glorot_uniform")
decoder <- keras_model_sequential() %>%
layer_dense(units = 64, activation = "relu", input_shape = c(latent_dim)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = input_dim, activation = "sigmoid")
## no sampling
vae <- keras_model(inputs = encoder$input, outputs = decoder(encoder$output[, 1:latent_dim]))
vae %>% compile(optimizer = "adam", loss = "CosineSimilarity")
vae_fit <- vae %>% fit(data_norm, data_norm, epochs = 100, batch_size = 24, validation_split = 0.2)
encoder_output <- stats::predict(encoder, data_norm)
sumVAE <- summary(lm(as.matrix(y)~encoder_output[,1:10]))
vAERsqaured <- sumVAE$r.squared
################################################################################
library(MOFA2)
data_norm <- list()
data_norm$data$view_1 <-  t(scale(x,T,T))
MOFAmodel <- create_mofa(data_norm$data)
MOFAmodel <- prepare_mofa(MOFAmodel)
MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE,outfile = "SSC-Mofa.hdf5")
SSC_MOFA <- load_model(file = "SSC-Mofa.hdf5",remove_inactive_factors = FALSE)
factors <- get_factors(SSC_MOFA, factors = "all")
SumMofa<- summary(lm(as.matrix(y)~factors$group1))
source("interUnion.R")
Z_ER <- read.table("z_matrix.csv",header = T,
row.names = 1,sep = ",")
sigK  <- c(10,12,47,56,77)
sigIn <- c("Z12.Z99","Z47.Z6","Z47.Z85","Z77.Z90")
IntData        <- interUnion(sigK,Z_ER)
Dataint        <- IntData$interaction[,sigIn]
Data_real      <- data.frame(y=y,Z_ER[,sigK],Dataint)
SumReal            <- summary(lm(MRSS~.,data = Data_real))
SumReal$r.squared
## ggplot2
topvsSLIDE <- data.frame(Method=c('SLIDE','VAE','MOFA+'),values=c(sqrt(SumReal$r.squared),sqrt(vAERsqaured),sqrt(SumMofa$r.squared)))
P <- ggplot(topvsSLIDE, aes(x=Method, y=values, fill=Method)) +
geom_col(width = 0.25, color="black") +
coord_cartesian(ylim=c(0.4,1)) +
theme_minimal() +
scale_fill_manual(values=c("#83b5dd","#f3ae59","#00FF00")) +
ylab("Spearman Correlation") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.text = element_text(size = 14),
axis.text = element_text(size = 12))
P
P
